from typing import Iterator, Literal, overload

class Point:
    row: int
    col: int
    def __init__(self, row: int, col: int, /) -> None: ...
    @property
    def up(self) -> Point: ...
    @property
    def down(self) -> Point: ...
    @property
    def left(self) -> Point: ...
    @property
    def right(self) -> Point: ...
    @property
    def north(self) -> Point: ...
    @property
    def south(self) -> Point: ...
    @property
    def west(self) -> Point: ...
    @property
    def east(self) -> Point: ...
    def __add__(self, other: Point, /) -> Point: ...
    def __sub__(self, other: Point, /) -> Point: ...

class orange:
    start: int
    stop: int
    def __init__(self, start: int, stop: int, /) -> None: ...
    def __contains__(self, item: int, /) -> bool: ...
    @overload
    def __eq__(self, other: orange, /) -> bool: ...
    @overload
    def __eq__(self, other: object, /) -> Literal[False]: ...
    def __hash__(self) -> int: ...
    def __bool__(self) -> bool: ...
    def __len__(self) -> int: ...
    def __iter__(self) -> Iterator[int]: ...
    def __and__(self, other: orange, /) -> orange: ...
    def __sub__(self, other: orange, /) -> list[orange]: ...
    def __repr__(self) -> str: ...
